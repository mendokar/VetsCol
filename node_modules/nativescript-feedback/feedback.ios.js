"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var feedback_common_1 = require("./feedback.common");
exports.FeedbackPosition = feedback_common_1.FeedbackPosition;
exports.FeedbackType = feedback_common_1.FeedbackType;
var Feedback = (function (_super) {
    __extends(Feedback, _super);
    function Feedback() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Feedback.prototype.show = function (options) {
        return new Promise(function (resolve, reject) {
            var icon = options.icon ? UIImage.imageNamed(options.icon) : null;
            var hideOnSwipe = true;
            var hideOnTap = true;
            var message = ISMessages.cardAlertWithTitleMessageIconImageDurationHideOnSwipeHideOnTapAlertTypeAlertPosition(options.title, options.message, icon, options.duration ? options.duration / 1000 : 4.0, hideOnSwipe, hideOnTap, Feedback.getType(options.type), Feedback.getPosition(options.position));
            if (options.backgroundColor) {
                message.alertViewBackgroundColor = options.backgroundColor.ios;
            }
            if (options.titleColor) {
                message.titleLabelTextColor = options.titleColor.ios;
            }
            message.titleLabelFont = UIFont.boldSystemFontOfSize(15.0);
            if (options.messageColor) {
                message.messageLabelTextColor = options.messageColor.ios;
            }
            message.messageLabelFont = UIFont.systemFontOfSize(13.0);
            message.showDidHide(function () {
                if (options.onTap) {
                    options.onTap();
                }
            }, function (hidden) {
            });
            resolve();
        });
    };
    Feedback.prototype.hide = function (options) {
        return new Promise(function (resolve, reject) {
            ISMessages.hideAlertAnimated(true);
            resolve();
        });
    };
    Feedback.getType = function (type) {
        if (type === undefined || type === null || type === feedback_common_1.FeedbackType.Custom) {
            return 4;
        }
        else if (type === feedback_common_1.FeedbackType.Warning) {
            return 2;
        }
        else if (type === feedback_common_1.FeedbackType.Error) {
            return 1;
        }
        else if (type === feedback_common_1.FeedbackType.Info) {
            return 3;
        }
        else {
            return 0;
        }
    };
    Feedback.getPosition = function (position) {
        if (!position || position === feedback_common_1.FeedbackPosition.Top) {
            return 0;
        }
        else {
            return 1;
        }
    };
    return Feedback;
}(feedback_common_1.FeedbackCommon));
exports.Feedback = Feedback;
